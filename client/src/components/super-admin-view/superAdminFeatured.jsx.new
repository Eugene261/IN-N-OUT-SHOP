import React, { useEffect, useState, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  toggleProductBestseller, 
  toggleProductNewArrival 
} from '../../store/shop/product-slice/index';
import { fetchFeaturedProducts } from '../../store/super-admin/products-slice/index';
import { getFeatureImages, deleteFeatureImage, addFeatureImage } from '../../store/common-slice/index';
import { 
  Star, 
  Zap, 
  Loader2, 
  AlertCircle, 
  CheckCircle, 
  Activity, 
  Box, 
  Image, 
  Trash2,
  UploadCloud,
  FileIcon,
  X,
  Layout,
  Grid
} from 'lucide-react';

// Import the FeaturedCollections components
import FeaturedCollectionList from '../superAdmin-view/featuredCollectionList';
import FeaturedCollectionForm from '../superAdmin-view/featuredCollectionForm';

const SuperAdminFeatured = () => {
  const dispatch = useDispatch();
  const { featuredProducts, isLoading: productsLoading } = useSelector((state) => state.superAdminProducts);
  const { FeatureImageList, deleteLoading, deleteError, uploadLoading, uploadError, isLoading: imagesLoading } = useSelector(state => state.commonFeature);
  
  // Tab state
  const [activeTab, setActiveTab] = useState('featureImages'); // 'featureImages', 'featuredCollections', 'featuredProducts'
  
  const [updateStatus, setUpdateStatus] = useState({
    loading: false,
    error: null,
    successMessage: null,
    productId: null,
    type: null
  });
  
  const [filteredProducts, setFilteredProducts] = useState(null);
  const [deletingId, setDeletingId] = useState(null);
  const [deleteSuccess, setDeleteSuccess] = useState(false);
  
  // Image upload states
  const [imageFile, setImageFile] = useState(null);
  const [isDragging, setIsDragging] = useState(false);
  const [uploadSuccess, setUploadSuccess] = useState(false);
  const fileInputRef = useRef(null);
  
  // Featured collections states
  const [showCollectionForm, setShowCollectionForm] = useState(false);
  const [editingCollection, setEditingCollection] = useState(null);
  
  useEffect(() => {
    dispatch(fetchFeaturedProducts());
    dispatch(getFeatureImages());
  }, [dispatch]);
  
  // Clear success/error messages after 5 seconds
  useEffect(() => {
    let timer;
    if (deleteSuccess || deleteError || uploadSuccess) {
      timer = setTimeout(() => {
        setDeleteSuccess(false);
        setUploadSuccess(false);
      }, 5000);
    }
    return () => clearTimeout(timer);
  }, [deleteSuccess, deleteError, uploadSuccess]);
  
  // Handle image file upload
  useEffect(() => {
    if (imageFile) {
      handleUploadImage();
    }
  }, [imageFile]);
  
  const handleImageFileChange = (event) => {
    const selectedFile = event.target.files?.[0];
    if (selectedFile) setImageFile(selectedFile);
  };
  
  const handleDragOver = (evt) => {
    evt.preventDefault();
    setIsDragging(true);
  };
  
  const handleDragLeave = (evt) => {
    evt.preventDefault();
    setIsDragging(false);
  };
  
  const handleDrop = (evt) => {
    evt.preventDefault();
    setIsDragging(false);
    const droppedFile = evt.dataTransfer.files?.[0];
    if (droppedFile) setImageFile(droppedFile);
  };
  
  const handleRemoveImage = () => {
    setImageFile(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };
  
  const handleUploadImage = async () => {
    try {
      await dispatch(addFeatureImage(imageFile)).unwrap();
      setUploadSuccess(true);
      setImageFile(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    } catch (error) {
      console.error('Error uploading feature image:', error);
    }
  };
  
  // Handle toggle bestseller with better error tracking
  const handleToggleBestseller = async (productId) => {
    try {
      setUpdateStatus({
        loading: true,
        error: null,
        successMessage: null,
        productId,
        type: 'bestseller'
      });
      
      const result = await dispatch(toggleProductBestseller(productId)).unwrap();
      
      setUpdateStatus({
        loading: false,
        error: null,
        successMessage: result.message || 'Bestseller status updated successfully',
        productId,
        type: 'bestseller'
      });
      
      // Auto-clear success message after 3 seconds
      setTimeout(() => {
        setUpdateStatus(prev => {
          if (prev.productId === productId && prev.type === 'bestseller') {
            return {
              ...prev,
              successMessage: null
            };
          }
          return prev;
        });
      }, 3000);
      
    } catch (error) {
      setUpdateStatus({
        loading: false,
        error: error.message || 'Failed to update bestseller status',
        successMessage: null,
        productId,
        type: 'bestseller'
      });
    }
  };
  
  // Handle toggle new arrival with better error tracking
  const handleToggleNewArrival = async (productId) => {
    try {
      setUpdateStatus({
        loading: true,
        error: null,
        successMessage: null,
        productId,
        type: 'newArrival'
      });
      
      const result = await dispatch(toggleProductNewArrival(productId)).unwrap();
      
      setUpdateStatus({
        loading: false,
        error: null,
        successMessage: result.message || 'New arrival status updated successfully',
        productId,
        type: 'newArrival'
      });
      
      // Auto-clear success message after 3 seconds
      setTimeout(() => {
        setUpdateStatus(prev => {
          if (prev.productId === productId && prev.type === 'newArrival') {
            return {
              ...prev,
              successMessage: null
            };
          }
          return prev;
        });
      }, 3000);
      
    } catch (error) {
      setUpdateStatus({
        loading: false,
        error: error.message || 'Failed to update new arrival status',
        successMessage: null,
        productId,
        type: 'newArrival'
      });
    }
  };
  
  function handleDeleteImage(imageId) {
    if (window.confirm('Are you sure you want to delete this image? This action cannot be undone.')) {
      setDeletingId(imageId);
      
      dispatch(deleteFeatureImage(imageId))
        .unwrap()
        .then((data) => {
          if (data?.success) {
            setDeleteSuccess(true);
          }
        })
        .catch((error) => {
          console.error("Delete failed:", error);
        })
        .finally(() => {
          setDeletingId(null);
        });
    }
  }
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { 
      opacity: 1, 
      y: 0,
      transition: { duration: 0.3 }
    }
  };
  
  const tableRowVariants = {
    hidden: { opacity: 0, x: -20 },
    visible: { 
      opacity: 1, 
      x: 0,
      transition: { duration: 0.3 }
    }
  };
  
  // Function to make staggered items visible
  const visible = (i) => {
    return {
      opacity: 1,
      y: 0,
      transition: {
        delay: i * 0.1,
        duration: 0.3
      }
    };
  };
