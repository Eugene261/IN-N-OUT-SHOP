import React, { useEffect, useState } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { fetchBestsellerProducts } from '../../store/shop/product-slice/index';
import { addToCart, fetchCartItems } from '@/store/shop/cart-slice';
import RenderImage from '../../components/common/renderImage';
import { motion } from 'framer-motion';
import ProductDetailsDialog from '@/components/shopping-view/productDetails';
import { toast } from 'sonner';
import LoadingWrapper from '@/components/common/LoadingWrapper';

const BestSeller = () => {
  const dispatch = useDispatch();
  const { bestsellerProducts, bestsellerLoading: loading } = useSelector((state) => state.shopProducts);
  const { cartItems } = useSelector((state) => state.shopCart);
  const { user } = useSelector((state) => state.auth);
  const [mainImage, setMainImage] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
    dispatch(fetchBestsellerProducts());
  }, [dispatch]);

  useEffect(() => {
    if (bestsellerProducts?.[0]) {
      setMainImage(bestsellerProducts[0].image || '');
    }
  }, [bestsellerProducts]);

  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        when: "beforeChildren",
        staggerChildren: 0.2,
        duration: 0.5 
      }
    }
  };

  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { 
      y: 0, 
      opacity: 1,
      transition: { duration: 0.5 }
    }
  };

  const buttonVariants = {
    initial: { scale: 1 },
    hover: { 
      scale: 1.05,
      boxShadow: "0px 5px 15px rgba(0, 0, 0, 0.1)",
      transition: { type: "spring", stiffness: 400, damping: 10 }
    },
    tap: { scale: 0.95 }
  };

  const handleOpenDialog = () => {
    setIsDialogOpen(true);
  };

  const handleAddToCart = (productId) => {
    if (!user) {
      toast.error("Please login to add items to your cart");
      return;
    }

    // Check if item is already in cart
    const existingItem = cartItems?.find(item => 
      item.productId === productId || 
      item.productId?._id === productId
    );

    if (existingItem) {
      toast.info("This item is already in your cart", {
        position: 'top-center',
        duration: 2000
      });
      return;
    }

    dispatch(addToCart({ 
      userId: user?.id, 
      productId: productId, 
      quantity: 1 
    }))
    .then((data) => {
      if(data?.payload.success) {
        dispatch(fetchCartItems(user?.id));
        toast.success('Product added to cart', {
          position: 'top-center',
          duration: 2000
        });
      }
    });
  };

  const renderEmptyState = () => (
    <div className="text-center py-12">
      <p className="text-gray-500 text-lg">No bestseller products available at the moment.</p>
      <p className="text-gray-400 mt-2">Check back soon for our top picks!</p>
    </div>
  );

  return (
    <section className="py-12">
      <div className="container mx-auto px-4">
        <motion.h2 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="text-3xl text-center font-bold mb-8"
        >
          Best Seller
        </motion.h2>
        
        <LoadingWrapper isLoading={loading} minHeight="400px" className="w-full">
          {bestsellerProducts && bestsellerProducts.length > 0 ? (
            <motion.div 
              className="grid grid-cols-1 lg:grid-cols-2 gap-8"
              variants={containerVariants}
              initial="hidden"
              animate="visible"
            >
              {/* Main product image */}
              <motion.div 
                className="relative overflow-hidden rounded-lg bg-gray-100 h-[500px] flex items-center justify-center"
                variants={itemVariants}
              >
                {mainImage && (
                  <RenderImage 
                    src={mainImage} 
                    alt="Bestseller product" 
                    className="object-cover w-full h-full"
                  />
                )}
                <motion.button
                  className="absolute bottom-4 right-4 bg-black text-white px-6 py-3 rounded-full font-medium"
                  variants={buttonVariants}
                  initial="initial"
                  whileHover="hover"
                  whileTap="tap"
                  onClick={handleOpenDialog}
                >
                  View Details
                </motion.button>
              </motion.div>

              {/* Product thumbnails and info */}
              <motion.div variants={itemVariants} className="flex flex-col">
                <h3 className="text-2xl font-bold mb-4">Our Top Picks</h3>
                
                <div className="grid grid-cols-2 gap-4 mb-8">
                  {bestsellerProducts.slice(0, 4).map((product, index) => (
                    <motion.div 
                      key={product._id || index}
                      className={`cursor-pointer rounded-lg overflow-hidden border-2 ${
                        product.image === mainImage ? 'border-black' : 'border-transparent'
                      }`}
                      onClick={() => setMainImage(product.image)}
                      whileHover={{ scale: 1.03 }}
                      whileTap={{ scale: 0.98 }}
                    >
                      <RenderImage 
                        src={product.image} 
                        alt={product.name} 
                        className="w-full h-32 object-cover"
                      />
                    </motion.div>
                  ))}
                </div>

                <div className="space-y-4 flex-grow">
                  {bestsellerProducts.slice(0, 1).map((product, index) => (
                    <div key={product._id || index} className="space-y-2">
                      <h4 className="text-xl font-bold">{product.name}</h4>
                      <div 
                        className="text-gray-600 line-clamp-3"
                        dangerouslySetInnerHTML={{ __html: product.description }}
                      />
                      <div className="flex items-center justify-between mt-4">
                        <span className="text-xl font-bold">${product.price.toFixed(2)}</span>
                        <motion.button
                          className="bg-black text-white px-6 py-2 rounded-full font-medium flex items-center gap-2"
                          variants={buttonVariants}
                          initial="initial"
                          whileHover="hover"
                          whileTap="tap"
                          onClick={() => handleAddToCart(product._id)}
                        >
                          Add to Cart
                        </motion.button>
                      </div>
                    </div>
                  ))}
                </div>
              </motion.div>
            </motion.div>
          ) : (
            renderEmptyState()
          )}
        </LoadingWrapper>

        <ProductDetailsDialog 
          open={isDialogOpen} 
          setOpen={setIsDialogOpen} 
          productDetails={bestsellerProducts?.[0] || null} 
        />
      </div>
    </section>
  );
};

export default BestSeller;
